@page "/inventory"
@using BusinessTracking.Models
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject BusinessTracking.Services.DatabaseService DatabaseService

<h3>Inventory</h3>

<div>
    <h4>Add New Item</h4>
    <input @bind="newItem.Name" placeholder="Name" />
    <input type="number" @bind="newItem.Quantity" placeholder="Quantity" />
    <input type="number" @bind="newItem.Price" placeholder="Price" />
    @* <button class="btn btn-primary" @onclick="">Save</button> *@
</div>

@if (inventoryItems != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Item ID</th>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in inventoryItems)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Quantity</td>
                    <td>@item.Price</td>
                    @* <td><button class="btn btn-primary" @onclick="() => EditItem(item)">Edit</button></td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<InventoryItem> inventoryItems;
    private InventoryItem newItem = new InventoryItem();

    protected override async Task OnInitializedAsync()
    {
        //inventoryItems = await SupabaseService.FetchInventoryItems();
    }
}
